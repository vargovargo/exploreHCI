runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
par()
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
ompassRose<-function(x,y,rot=0,cex=1) {
oldcex<-par(cex=cex)
mheight<-strheight("M")
xylim<-par("usr")
plotdim<-par("pin")
xmult<-(xylim[2]-xylim[1])/(xylim[4]-xylim[3])*plotdim[2]/plotdim[1]
point.angles<-seq(0,7*pi/4,by=pi/4)+pi*rot/180
crspans<-rep(c(mheight*3,mheight/2),4)
xpoints<-cos(point.angles)*crspans*xmult+x
ypoints<-sin(point.angles)*crspans+y
polygon(xpoints,ypoints)
txtxpoints<-cos(point.angles[c(1,3,5,7)])*1.33*crspans[1]*xmult+x
txtypoints<-sin(point.angles[c(1,3,5,7)])*1.33*crspans[1]+y
text(txtxpoints,txtypoints,c("E","N","W","S"))
par(oldcex)
}
plot(1:100)
compasfRose(50,50)
ompassRose(50,50)
compassRose<-function(x,y,rot=0,cex=1) {
oldcex<-par(cex=cex)
mheight<-strheight("M")
xylim<-par("usr")
plotdim<-par("pin")
xmult<-(xylim[2]-xylim[1])/(xylim[4]-xylim[3])*plotdim[2]/plotdim[1]
point.angles<-seq(0,7*pi/4,by=pi/4)+pi*rot/180
crspans<-rep(c(mheight*3,mheight/2),4)
xpoints<-cos(point.angles)*crspans*xmult+x
ypoints<-sin(point.angles)*crspans+y
polygon(xpoints,ypoints,col="blue")
txtxpoints<-cos(point.angles[c(1,3,5,7)])*1.33*crspans[1]*xmult+x
txtypoints<-sin(point.angles[c(1,3,5,7)])*1.33*crspans[1]+y
text(txtxpoints,txtypoints,c("E","N","W","S"))
par(oldcex)
}
cc
compassRose(5,50)
compassRose<-function(x,y,rot=0,cex=1) {
oldcex<-par(cex=cex)
mheight<-strheight("M")
xylim<-par("usr")
plotdim<-par("pin")
xmult<-(xylim[2]-xylim[1])/(xylim[4]-xylim[3])*plotdim[2]/plotdim[1]
point.angles<-seq(0,7*pi/4,by=pi/4)+pi*rot/180
crspans<-rep(c(mheight*3,mheight/2),4)
xpoints<-cos(point.angles)*crspans*xmult+x
ypoints<-sin(point.angles)*crspans+y
polygon(xpoints,ypoints,col="gold")
txtxpoints<-cos(point.angles[c(1,3,5,7)])*1.33*crspans[1]*xmult+x
txtypoints<-sin(point.angles[c(1,3,5,7)])*1.33*crspans[1]+y
text(txtxpoints,txtypoints,c("E","N","W","S"))
par(oldcex)
}
compassRose(80,50)
compassRose(80,50,cex=.5)
compassRose(30,70,cex=.5)
shiny::runApp('F:/0 SHINY APPS/PLACE')
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
#  x1 <- xUp-sZ*3;
# x2 <- xUp-sZ*2
#y1 <- yUp
# y2 <- yUp-sZ
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
# xvec  <- c(x1,x2,x2,x1)
#  yvec  <- c(y1,y1,y2,y2)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+*sZ,col= colMat[y+1,x+1])
text(xUp-1.5*sZ,  yUp+1,     t1,        adj=c(.5,0),cex=tcex)
text(xUp-sZ*3-2,  yUp-sZ-1.5,t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
#  x1 <- xUp-sZ*3;
# x2 <- xUp-sZ*2
#y1 <- yUp
# y2 <- yUp-sZ
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
# xvec  <- c(x1,x2,x2,x1)
#  yvec  <- c(y1,y1,y2,y2)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+*sZ,col= colMat[y+1,x+1])
text(xUp-1.5*sZ,  yUp+1,     t1,        adj=c(.5,0),cex=tcex)
text(xUp-sZ*3-2,  yUp-sZ-1.5,t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
#  x1 <- xUp-sZ*3;
# x2 <- xUp-sZ*2
#y1 <- yUp
# y2 <- yUp-sZ
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
# xvec  <- c(x1,x2,x2,x1)
#  yvec  <- c(y1,y1,y2,y2)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xUp-1.5*sZ,  yUp+1,     t1,        adj=c(.5,0),cex=tcex)
text(xUp-sZ*3-2,  yUp-sZ-1.5,t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colMat <- matrix(t(c("#FFFFFF","#FFFF99","#ffff00",
"#CCFFFF","#CCFF99","#CCFF33",
"#4d4dff","#009966","#248f24")),nrow=3,ncol=3,byrow=TRUE)
colSq(80,80)
colSq(80,80,3)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1,     t1,        adj=c(.5,0),cex=tcex)
text(xLo-2,  yLo-sZ-1.5,     t2, srt=90,adj=c(.5,0),cex=tcex)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1,     t1,        adj=c(.5,0),cex=tcex)
text(xLo-2,  yLo-sZ-1.5,     t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq(40,60,3,"x","y",2)
colSq(40,60,6,"x","y",2)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1,     t1,        adj=c(.5,0),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
plot(1:100)
colSq(40,60,6,"x","y",2)
plot(1:100)
colSq(40,60,6,"x","y",1)
colSq(40,60,6,"x -->","y -->",1)
text(20,20,&rarr)
intToUtf8(2)
intToUtf8(&rarr;)
intToUtf8(a)
intToUtf8(255)
intToUtf8(yuml)
help("intToUtf8")
rawToChar(234)
rawToChar(c(234)
)
help("rawToChar")
!ascii
help(ascii)
??ascii
stri_enc_list(simplify = FALSE)
!stringi
?stringi
plot(1:100)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")        adj=c(.5,0),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,0),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq(40,60,6,"xxxx","yxx",1)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,1),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,1),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,1),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,1),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq(40,60,6,"xxxx","yxx",1)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,1),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
plot(1:100)
colSq(40,60,6,"xxxx","yxx",1)
colSq(80,20,8,"xxxx","yxx",1)
x) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,1),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,1),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,1),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,1),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq(80,20,8,"xxxx","yxx",1)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,1),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,.5),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq(80,20,8,"xxxx","yxx",1)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,1),cex=tcex)
text(xLo,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq(80,20,8,"xxxx","yxx",1)
colSq <- function(xLo,yLo,sZ,t1,t2,tcex) {
# rows - shades of yellow
# columns - shades of blue
# hard wired for now
xvec  <- c(xLo,xLo+sZ,xLo+sZ,xLo)
yvec  <- c(yLo,yLo,yLo+sZ,yLo+sZ)
for (x in 0:2) for (y in 0:2) polygon(xvec+x*sZ,  yvec+y*sZ,col= colMat[y+1,x+1])
text(xLo+1.5*sZ,  yLo-1, paste(">>",t1,">>")  ,      adj=c(.5,1),cex=tcex)
text(xLo-1,  yLo+sZ*1.5,     t2, srt=90,adj=c(.5,0),cex=tcex)
# another way to approach this with "automatic" colors
# for (y in 0:2) for (x in 0:2)  polygon(xvec+x,  yvec-y,col= rgb(255-x*127.5,255,255-y*127.5,max=255))
}
colSq(80,20,8,"xxxx","yxx",1)
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
shiny::runApp('F:/0 SHINY APPS/PLACE')
shiny::runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
install.packages("plotrix")
library(plotrix)
barplot(1:4)
barplot(1:4,cylindrical=TRUE,shadow=TRUE)
barp(1:4,cylindrical=TRUE,shadow=TRUE)
warnings()
shiny::runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
shiny::runApp('F:/0 SHINY APPS/PLACE')
shiny::runApp('F:/0 SHINY APPS/PLACE')
help("conditionalPanel")
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
paste("input$cZoom==TRUE &","input.ID == ",c(1,2,4),c(rep("|",2),""),  collapse="")
runApp('F:/0 SHINY APPS/PLACE')
runApp('F:/0 SHINY APPS/PLACE')
paste("input$cZoom==TRUE &",paste("input.ID == ",c(1,2,4),c(rep("|",2),""),  collapse="")
)
paste("input$cZoom==TRUE &","(",paste("input.ID == ",c(1,2,4),c(rep("|",2),""),  collapse=""),")")
runApp('F:/0 SHINY APPS/PLACE')
paste("input$cZoom==TRUE &","(",paste("input.ID == ",c(1,2,4),c(rep("|",2),""),  collapse=""),")")
runApp('F:/0 SHINY APPS/PLACE')
paste( "(",
paste("input.ID == ",c(1,2,4),c(rep("|",2),""),  collapse=""),
") & input$cZoo")
shiny::runApp('F:/0 SHINY APPS/PLACE')
condition =  paste( "(",
paste("input.ID == ",c(1,2,4),c(rep("|",2),""),  collapse=""),
")",
" & input$cZoom")
paste( "(",
paste("input.ID == ",c(1,2,4),c(rep("|",2),""),  collapse=""),
")",
" & input$cZoom")
runApp('F:/0 SHINY APPS/PLACE')
library(openxlsx)
library(dplyr)
#-- Read Data -----------------------------------------------------------------------------------------------------------------------------------
mypath <- getwd()
#mypath <- "f:/0 SHINY APPS/HCI_Viz"
t1   <- "HCI_PovertyRate_754_CT_PL_CO_RE_CA_1-22-14.xlsx"
t2   <- "ParkBeachOpen10_output4-12-13.xlsx"
t3   <- "HCI_RetailFoodEnvironment_75_CA_CO_RE_PL_CT_11-15-13.xlsx" # original raw file was .xls, manually changed to .xlsx
t4   <- "HCI_AbuseNeglectChildren_741_CT_PL_CO_RE_CA-24-4-15.xlsx"
t5a  <- "HCI_AlcoholOutletsQ_774_CA_RE_CO_CD_PL_CT-A-N-5-16-14.xlsx"
t5b  <- "HCI_AlcoholOutletsQ_774_CO_CD_PL_CT-O-Y-5-16-14.xlsx"
iD1  <- read.xlsx(paste0(mypath,"/RawDat/",t1))
iD1  <- iD1[iD1$Poverty == "Overall",]
iD1  <- iD1[iD1$reportyear == "2006-2010"      & !is.na(iD1$reportyear), ]
iD1  <- iD1[iD1$geotype %in% c("CA","CO","CT") & !is.na(iD1$geotype), ]
#iD1  <- iD1[ ! (iD1$geotype == "CT" & iD1$race_eth_name != "Total"), ]
iD2  <- read.xlsx(paste0(mypath,"/RawDat/",t2))
iD2                                 <- iD2[iD2$geotype %in% c("CA","CO","CT") & !is.na(iD2$geotype), ]
#iD2  <- iD2[ ! (iD2$geotype == "CT" & iD2$race_eth_name != "Total"), ]
iD2$geotypevalue[iD2$geotype=="CT"] <- paste0("06",iD2$geotypevalue[iD2$geotype=="CT"])
iD2$geoname[iD2$geotype=="CT"]      <- substr(iD2$geoname[iD2$geotype=="CT"],14,20)
iD2$geotype[iD2$geotype=="ST"]      <- "CA"
iD3  <- read.xlsx(paste0(mypath,"/RawDat/",t3))
iD3  <- iD3[iD3$geotype %in% c("CA","CO","CT") & !is.na(iD3$geotype), ]
iD4  <- read.xlsx(paste0(mypath,"/RawDat/",t4))
iD4 <- iD4[iD4$geotype %in% c("CA","CO","CT") & !is.na(iD4$geotype), ]
iD4 <- iD4[iD4$reportyear == "2013"      & !is.na(iD4$reportyear), ]     # ONLY 2013 has census data
iD4 <- iD4[  (iD4$geotype == "CT" &  iD4$strata_name=="All Allegations" & iD4$strata_level_name == "All Dispositions")
|(iD4$geotype != "CT" &  iD4$strata_name=="Allegations of Abuse and Neglect" & iD4$strata_level_name == "All Dispositions") , ]
iD5a <- read.xlsx(paste0(mypath,"/RawDat/",t5a))
iD5b <- read.xlsx(paste0(mypath,"/RawDat/",t5b))
iD5  <- rbind(iD5a,iD5b)
iD5  <- iD5[iD5$geotype %in% c("CA","CO","CT") & !is.na(iD5$geotype), ]
#iD5  <- iD5[ ! (iD5$geotype == "CT" & iD5$race_eth_name != "Total"), ]
iD5  <- iD5[ iD5$license_type == "Total_licenses" , ]
vL <- c("race_eth_name","race_eth_code","geotype","geotypevalue","geoname","county_name")
iDx1  <- iD1[, c(vL,"NumPov","TotalPop","percent","percent_SE")]
iDx2  <- iD2[, c(vL,"pop_park_acc","pop2010","p_parkacc","se")]
iDx3  <- iD3[, c(vL,"mrfei")]
iDx4 <-  iD4[, c(vL,"allegations_children","total_children","percent","se")]
iDx5 <-  iD5[, c(vL,"numerator","denominator","percent","se")]
names(iDx1)[7:10] <- c("nPov","popPov","p2Pov","sPov")
names(iDx2)[7:10] <- c("nPark","popPark","p2park","sPark")
names(iDx3)[7  ] <- c("nFood")
iDx3$popFood    <- 100
iDx3$sFood      <- 0
names(iDx4)[7:10] <- c("nAbuse","popAbuse","p2Abuse","sAbuse")
names(iDx5)[7:10] <- c("nAlco","popAlco","p2Alco","sAlco")
park_t1 <- iDx2[iDx2$geotype == "CO",]
park_t2 <- park_t1 %>% group_by(race_eth_name,race_eth_code) %>% summarize(nPark=sum(nPark,na.rm=TRUE), popPark=sum(popPark,na.rm=TRUE) )
park_t2$geotype      <- "CA"
park_t2$geotypevalue <- "06"
park_t2$geoname      <- "California"
park_t2$county_name  <- NA
iDx2 <- merge(park_t2,iDx2, by = c("geotype","geotypevalue","geoname","county_name","race_eth_name","race_eth_code","nPark","popPark"),all=TRUE)
shiny::runApp('F:/0 SHINY APPS/HCI_Viz')
shiny::runApp('F:/0 SHINY APPS/HCI_Viz')
shiny::runApp()
myV1=1
myGeoname="California"
myV1 <- as.numeric(myV1)
iTmp <- iData[iData$geotype %in% c("CO","CA") & iData$geoname == myGeoname & iData$race_eth_name %in% r0name,]
# iTmp <- na.omit(iTmp[, 4])  #work around -4 gets rid of county_name column
wDat <- 100*eval(l.PPA[[myV1]])
sDat <-      eval(s.PPA[[myV1]])
atx <- barplot(wDat,names.arg = iTmp$race_eth_name,col=iTmp$race_eth_code,
main=paste("Race/Ethnic Difference in",n.PPA[myV1],"in",myGeoname)
)
abline(h=0)
if (mCI) {arrows(atx,wDat-1.96*sDat,atx,wDat+1.96*sDat,angle=90,code=3,length=.05,lwd=2)}
mCI=FALSE
mtext(text="Estimate",side=1,line=3,at=0,adj=1)
mtext(text=round(wDat,1),side=1,line=3,at=atx)
nG <- length(wDat)
xDat <- round(wDat-wDat[nG],1); xDat[nG] <- "-"
mtext(text="Absolute Diff.",side=1,line=4,at=0,adj=1)
mtext(text=xDat,side=1,line=4,at=atx)
xDat <- round((wDat/wDat[nG]),1); xDat[nG] <- "-"
xCol <- rep("black",nG)
xCol[xDat<1] <- "green"
xCol[xDat>2] <- "red"
mtext(text="Relative Diff.",side=1,line=5,at=0,adj=1)
mtext(text=xDat,side=1,line=5,at=atx,col=xCol)
par(mar=c(8,8,3,3))
myV1 <- as.numeric(myV1)
iTmp <- iData[iData$geotype %in% c("CO","CA") & iData$geoname == myGeoname & iData$race_eth_name %in% r0name,]
# iTmp <- na.omit(iTmp[, 4])  #work around -4 gets rid of county_name column
wDat <- 100*eval(l.PPA[[myV1]])
sDat <-      eval(s.PPA[[myV1]])
atx <- barplot(wDat,names.arg = iTmp$race_eth_name,col=iTmp$race_eth_code,
main=paste("Race/Ethnic Difference in",n.PPA[myV1],"in",myGeoname)
)
abline(h=0)
if (mCI) {arrows(atx,wDat-1.96*sDat,atx,wDat+1.96*sDat,angle=90,code=3,length=.05,lwd=2)}
mtext(text="Estimate",side=1,line=3,at=0,adj=1)
mtext(text=round(wDat,1),side=1,line=3,at=atx)
mtext(text=round(wDat,1),side=1,line=3,at=atx)
nG <- length(wDat)
xDat <- round(wDat-wDat[nG],1); xDat[nG] <- "-"
mtext(text="Absolute Diff.",side=1,line=4,at=0,adj=1)
mtext(text=xDat,side=1,line=4,at=atx)
xDat <- round((wDat/wDat[nG]),1); xDat[nG] <- "-"
xCol <- rep("black",nG)
xCol[xDat<1] <- "green"
xCol[xDat>2] <- "red"
mtext(text="Relative Diff.",side=1,line=5,at=0,adj=1)
mtext(text=xDat,side=1,line=5,at=atx,col=xCol)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
help("scatterD3")
runApp()
devtools::install_github("juba/scatterD3")
install.packages("devtools")
devtools::install_github("juba/scatterD3")
library(scatterD3)
help("scatterD3")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
View(iData)
myDat <- rbind(read.csv("D:/0  LCHC MASHUP/LGHC_ind_16.csv",sep=",",na.strings="",header=T,as.is=TRUE))
View(myDat)
myDat <- rbind(read.csv("D:/0  LCHC MASHUP/LGHC_ind_16.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:5)])
myDat <- rbind(read.csv("D:/0  LCHC MASHUP/LGHC_ind_15.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:5)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_16.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:5)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_24.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:5)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_33.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:5)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_36.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:5)]   )
View(myDat)
myDat <- rbind(read.csv("D:/0  LCHC MASHUP/LGHC_ind_15.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_16.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_24.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_33.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_36.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)]   )
myDat <- rbind(read.csv("D:/0  LCHC MASHUP/LGHC_ind_15.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_16.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_24.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_33.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_36.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)]   )
myDat <- rbind(read.csv("D:/0  LCHC MASHUP/LGHC_ind_15.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_16.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_24.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_33.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)],
read.csv("D:/0  LCHC MASHUP/LGHC_ind_36.csv",sep=",",na.strings="",header=T,as.is=TRUE)[,c(1:8)]   )
